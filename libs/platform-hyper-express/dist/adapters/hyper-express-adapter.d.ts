import { RequestMethod } from '@nestjs/common';
import { VersionValue, VersioningOptions } from '@nestjs/common/interfaces';
import { NestApplicationOptions } from '@nestjs/common/interfaces/nest-application-options.interface';
import { AbstractHttpAdapter } from '@nestjs/core/adapters/http-adapter';
import { Request, Response, Server, ServerConstructorOptions } from 'hyper-express';
type VersionedRoute = <TRequest extends Record<string, any> = any, TResponse = any>(req: TRequest, res: TResponse, next: () => void) => any;
export declare class HyperExpressAdapter extends AbstractHttpAdapter<Server, Request, Response> {
    private opts?;
    private readonly routerMethodFactory;
    private readonly logger;
    constructor(opts?: ServerConstructorOptions);
    port: number;
    once(): void;
    removeListener(): void;
    address(): string;
    reply(response: Response, body: any, statusCode?: number): boolean | Response<import("hyper-express").DefaultResponseLocals>;
    status(response: Response, statusCode: number): Response<import("hyper-express").DefaultResponseLocals>;
    end(response: Response, message?: string): void;
    render(response: Response, view: string, options: any): void;
    redirect(response: Response, statusCode: number, url: string): void;
    setErrorHandler(handler: Function, prefix?: string): void;
    setNotFoundHandler(handler: Function, prefix?: string): void;
    isHeadersSent(response: Response): boolean;
    setHeader(response: Response, name: string, value: string): Response<import("hyper-express").DefaultResponseLocals>;
    listen(port: string | number, callback?: () => void): any;
    listen(port: string | number, hostname: string, callback?: () => void): any;
    getHttpServer(): any;
    close(): Promise<any>;
    set(...args: any[]): void;
    enable(...args: any[]): void;
    disable(...args: any[]): void;
    engine(...args: any[]): void;
    useStaticAssets(path: string): void;
    setBaseViewsDir(path: string | string[]): void;
    setViewEngine(engine: string): void;
    getRequestHostname(request: Request): string;
    getRequestMethod(request: Request): string;
    getRequestUrl(request: Request): string;
    enableCors(options: any): Promise<void>;
    createMiddlewareFactory(requestMethod: RequestMethod): (path: string, callback: Function) => any;
    initHttpServer(_options: NestApplicationOptions): void;
    registerParserMiddleware(): void;
    setLocal(key: string, value: any): this;
    getType(): string;
    applyVersionFilter(handler: Function, version: VersionValue, versioningOptions: VersioningOptions): VersionedRoute;
    get(handler: any): any;
    get(path: any, handler: any): any;
    post(handler: any): any;
    post(path: any, handler: any): any;
    patch(handler: any): any;
    patch(path: any, handler: any): any;
    put(handler: any): any;
    put(path: any, handler: any): any;
    delete(handler: any): any;
    delete(path: any, handler: any): any;
    options(handler: any): any;
    options(path: any, handler: any): any;
}
export {};
